nonvars = c("year", "songtitle", "artistname", "songID", "artistID")
#To remove these variables from your training and testing sets, use the neat command
SongsTrain = SongsTrain[ , !(names(SongsTrain) %in% nonvars) ]
m1 <- glm(Top10~., data=SongsTrain, family=binomial)
Songs <- read.csv("songs.csv")
#str(Songs)
#head(Songs)
x <- subset(Songs, Songs$artistname == "Michael Jackson")
nrow(x)
#ans 18
x <- subset(Songs, Songs$Top10 == 1)
nrow(x)
#ans 1119
SongsTrain <- subset(Songs, Songs$year <= 2009)
SongsTest <- subset(Songs, Songs$year > 2009)
nrow(SongsTrain)
#ans 7201
nonvars = c("year", "songtitle", "artistname", "songID", "artistID")
#To remove these variables from your training and testing sets, use the neat command
SongsTrain = SongsTrain[ , !(names(SongsTrain) %in% nonvars) ]
SongsTest = SongsTest[ , !(names(SongsTest) %in% nonvars) ]
m1 <- glm(Top10~., data=SongsTrain, family=binomial)
summary(m1)
m1 <- glm(Top10~., data=SongsTrain, family=binomial)
#summary(m1)
coef(m1)
m1 <- glm(Top10~., data=SongsTrain, family=binomial)
summary(m1)
m1 <- glm(Top10~., data=SongsTrain, family=binomial)
#summary(m1)
attr(m1$coefficients, "names")[m1$coefficients <= 0.05]
Songs <- read.csv("songs.csv")
str(Songs)
head(Songs)
Songs <- read.csv("songs.csv")
#str(Songs)
#head(Songs)
#Songs[Songs$artistname=="Michael Jackson",]
table(Songs$artistname=="Michael Jackson")
table(Songs$Top10)
SongsTrain = Songs[Songs$year<=2009,]
SongsTest = Songs[Songs$year==2010,]
nrow(SongsTrain)
nonvars = c("year", "songtitle", "artistname", "songID", "artistID")
# To remove these variables from your training and testing sets, use the neat command
SongsTrain = SongsTrain[ , !(names(SongsTrain) %in% nonvars) ]
SongsTest = SongsTest[ , !(names(SongsTest) %in% nonvars) ]
SongsLog1 = glm(Top10 ~ ., data=SongsTrain, family=binomial)
summary(SongsLog1)
sum(summary(SongsLog1)$coefficients[2:34, 4] < 0.05) #count the number of significant variables, excluding the intercept.
SongsLog1 = glm(Top10 ~ ., data=SongsTrain, family=binomial)
#summary(SongsLog1)
sum(summary(SongsLog1)$coefficients[2:34, 4] < 0.05) #count the number of significant variables, excluding the intercept.
SongsLog1 = glm(Top10 ~ ., data=SongsTrain, family=binomial)
#summary(SongsLog1)
sum(summary(SongsLog1)$coefficients[2:34, 4] < 0.05) #count the number of significant variables, excluding the intercept.
m1 <- glm(Top10~., data=SongsTrain, family=binomial)
#summary(m1)
attr(m1$coefficients, "names")[m1$coefficients < 0.05]
m1 <- glm(Top10~., data=SongsTrain, family=binomial)
#summary(m1)
#attr(m1$coefficients, "names")[m1$coefficients < 0.05]
sum(summary(m1)$coefficients[2:34, 4] < 0.05)
library(caret)
caret::confusionMatrix(as.factor(SongsTest > 0.45),
as.factor(SongsTrain$spam==1))
#library(caret)
#caret::confusionMatrix(as.factor(SongsTest > 0.45),
#as.factor(SongsTrain$spam==1))
CM = table(m1 ,SongsTest$Top10)
?predict
# using the suffix 3_d because (d) will be the reference to this model
pred <- predict(m1, newdata = SongsTest, type = "response")
# at threshold 0.5
table(m1 >= 0.45, SongsTest$Top10)
View(SongsTest)
View(SongsTest)
# using the suffix 3_d because (d) will be the reference to this model
pred <- predict(m1, newdata = test, type = "response")
# using the suffix 3_d because (d) will be the reference to this model
pred <- predict(m1, newdata = SongsTest, type = "response")
# at threshold 0.5
table(m1 >= 0.45, SongsTest$Top10)
# using the suffix 3_d because (d) will be the reference to this model
pred <- predict(m1, newdata = SongsTest, type = "response")
# at threshold 0.5
table(pred >= 0.45, SongsTest$Top10)
x <- sum(diag(table(pred >= 0.45, SongsTest$Top10)))/nrow(SongsTest)
x
# using the suffix 3_d because (d) will be the reference to this model
pred <- predict(m1, newdata = SongsTest, type = "response")
# at threshold 0.5
pred_table <- table(pred >= 0.45, SongsTest$Top10)
pred_table[2,2]/sum(pred_table[,2])
pred_table[2,1]/sum(pred_table[,1])
pred_table[1,1]/sum(pred_table[,1])
predict_test <- predict(SongsLog1,newdata=SongsTest,type="response")
CM<-table(predict_test > 0.45,SongsTest$Top10)  # check with lower values
CM
acc = (309+15)/(309+44+5+15)
acc
# using the suffix 3_d because (d) will be the reference to this model
pred <- predict(m1, newdata = SongsTest, type = "response")
# at threshold 0.5
pred_table <- table(pred >= 0.45, SongsTest$Top10)
CM
base_acc = (309+5)/(309+44+5+15)
base_acc
# using the suffix 3_d because (d) will be the reference to this model
pred <- predict(m1, newdata = SongsTest, type = "response")
# at threshold 0.5
pred_table <- table(pred >= 0.45, SongsTest$Top10)
pred_table
x <- sum(diag(table(pred >= 0.45, SongsTest$Top10)))/nrow(SongsTest)
x
x <- sum(diag(SongsTest)/sum(SongsTest))
x <- sum(diag(pred_table)/sum(pred_table))
x
TPR = 15/(15+44)
TPR  #also known as Sensitivity
FPR = 5/(309+5)
FPR
Specificity = 309/(309+5)
Specificity
fixyou = Songs[Songs$songtitle=="Fix You",]
predict_fy <- predict(SongsLog1,newdata=fixyou,type="response")
predict_fy
View(fixyou)
View(fixyou)
#fixyou = Songs[Songs$songtitle=="Fix You",]
#predict_fy <- predict(SongsLog1,newdata=fixyou,type="response")
#predict_fy
fixyou <- subset(Songs, Songs$songtitle=="Fix You")
#fixyou = Songs[Songs$songtitle=="Fix You",]
#predict_fy <- predict(SongsLog1,newdata=fixyou,type="response")
#predict_fy
fixyous <- subset(Songs, Songs$songtitle=="Fix You")
View(fixyous)
#fixyou = Songs[Songs$songtitle=="Fix You",]
#predict_fy <- predict(SongsLog1,newdata=fixyou,type="response")
#predict_fy
fixyou <- subset(Songs, Songs$songtitle=="Fix You")
#fixyou = Songs[Songs$songtitle=="Fix You",]
#predict_fy <- predict(SongsLog1,newdata=fixyou,type="response")
#predict_fy
fixyou <- subset(Songs, Songs$songtitle=="Fix You")
predict_fy <- predict(SongsLog1,newdata=fixyou,type="response")
predict_fy
prob = unname(predict_fy)
logodds = log(prob/(1-prob))
logodds #original log odds
logodds2 = log(0.2/(1-0.2))
logodds2
#amount of units of increase needed
(logodds2-logodds)/0.2999
fixyou_plus <- fixyou
fixyou_plus <- fixyou
fixyou_plus$energy <- fixyou$energy - 0.2
fixyou_plus$loudness <- fixyou$loudness + 2
predict_fyplus <- predict(SongsLog1,newdata=fixyou_plus,type="response")
predict_fyplus
siglist = summary(SongsLog1)$coefficients[(summary(SongsLog1)$coefficients[, 4] < 0.05), 4]
sigpred = names(siglist[2:length(siglist)]) #remove the intercept
sigformula = as.formula(paste0("Top10 ~ ", paste0(sigpred, collapse = " + ")))
SongsLog2 = glm(sigformula, data=SongsTrain, family=binomial)
summary(SongsLog2)
predict_test2 <- predict(SongsLog2,newdata=SongsTest,type="response")
CM2<-table(predict_test2 > 0.45,SongsTest$Top10)
CM2
acc = (311+14)/(311+45+3+14)
acc  #very slight increase
siglist = summary(SongsLog1)$coefficients[(summary(SongsLog1)$coefficients[, 4] < 0.05), 4]
#sigpred = names(siglist[2:length(siglist)]) #remove the intercept
#sigformula = as.formula(paste0("Top10 ~ ", paste0(sigpred, collapse = " + ")))
#SongsLog2 = glm(sigformula, data=SongsTrain, family=binomial)
#summary(SongsLog2)
#predict_test2 <- predict(SongsLog2,newdata=SongsTest,type="response")
#CM2<-table(predict_test2 > 0.45,SongsTest$Top10)
#CM2
#acc = (311+14)/(311+45+3+14)
#acc  #very slight increase
siglist = summary(SongsLog1)$coefficients[(summary(SongsLog1)$coefficients[, 4] < 0.05), 4]
siglist
#sigpred = names(siglist[2:length(siglist)]) #remove the intercept
#sigformula = as.formula(paste0("Top10 ~ ", paste0(sigpred, collapse = " + ")))
#SongsLog2 = glm(sigformula, data=SongsTrain, family=binomial)
#summary(SongsLog2)
#predict_test2 <- predict(SongsLog2,newdata=SongsTest,type="response")
#CM2<-table(predict_test2 > 0.45,SongsTest$Top10)
#CM2
#acc = (311+14)/(311+45+3+14)
#acc  #very slight increase
siglist = summary(SongsLog1)$coefficients[(summary(SongsLog1)$coefficients[, 4] < 0.05), 4]
sigpred = names(siglist[2:length(siglist)]) #remove the intercept
sigformula = as.formula(paste0("Top10 ~ ", paste0(sigpred, collapse = " + ")))
SongsLog2 = glm(sigformula, data=SongsTrain, family=binomial)
summary(SongsLog2)
predict_test2 <- predict(SongsLog2,newdata=SongsTest,type="response")
CM2<-table(predict_test2 > 0.45,SongsTest$Top10)
CM2
acc = (311+14)/(311+45+3+14)
acc  #very slight increase
library(ROCR)
auc <- performance(SongsLog2, measure = "auc")@y.values[[1]]
library(ROCR)
auc <- performance(predict_test2, measure = "auc")@y.values[[1]]
library(ROCR)
auc <- performance(predict_test2, measure = "Top10")@y.values[[1]]
library(ROCR)
predict1 <- prediction(predict_test,SongsTest$Top10)
perf1 <- performance(predict1,x.measure="fpr",measure="tpr")
plot(perf1)
plot(perf1,colorize=T,print.cutoffs.at=c(0,0.1,0.2,0.3,0.5,1),text.adj=c(-.02,1.7))
as.numeric(performance(predict1,measure="auc")@y.values) #0.842
predict2 <- prediction(predict_test2,SongsTest$Top10)
perf2 <- performance(predict2,x.measure="fpr",measure="tpr")
plot(perf2)
plot(perf2,colorize=T,print.cutoffs.at=c(0,0.1,0.2,0.3,0.5,1),text.adj=c(-.02,1.7))
as.numeric(performance(predict2,measure="auc")@y.values) #0.843
library(ROCR)
predict1 <- prediction(predict_test,SongsTest$Top10)
perf1 <- performance(predict1,x.measure="fpr",measure="tpr")
plot(perf1)
plot(perf1,colorize=T,print.cutoffs.at=c(0,0.1,0.2,0.3,0.5,1),text.adj=c(-.02,1.7))
as.numeric(performance(predict1,measure="auc")@y.values) #0.842
library(ROCR)
ROCRpred <- prediction(predict_test, SongsTest$Top10)
ROCRperf <- performance(ROCRpred,x.measure="fpr",measure="tpr")
plot(ROCRperf)
library(ROCR)
ROCRpred <- prediction(predict_test, SongsTest$Top10)
ROCRperf <- performance(ROCRpred,x.measure="fpr",measure="tpr")
plot(ROCRperf)
plot(ROCRperf, colorize=T,print.cutoffs.at=c(0,0.1,0.2,0.3,0.5,1), text.adj=c(-0.2,1.7))
library(ROCR)
ROCRpred <- prediction(predict_test, SongsTest$Top10)
ROCRperf <- performance(ROCRpred,x.measure="fpr",measure="tpr")
plot(ROCRperf)
plot(ROCRperf, colorize=T,print.cutoffs.at=c(0,0.1,0.2,0.3,0.5,1), text.adj=c(-0.2,1.7))
as.numeric(performance(ROCRpred,measure="auc")@y.values)
rm(list=ls())
baseball <- read.csv("baseball.csv")
#str(baseball)
#summary(baseball)
table(baseball$Year)
table(baseball$Year)
baseball2002 <- (baseball, baseball$Year < 2002)
table(baseball$Year)
baseball2002 <- (baseball, baseball$Year < 2002)
table(baseball$Year)
baseball2002 <- subset(baseball, baseball$Year < 2002)
table(baseball$Year)
baseball2002 <- subset(baseball, baseball$Year < 2002)
table (baseball2002)
table(baseball$Year)
baseball2002 <- subset(baseball, baseball$Year < 2002)
table (baseball2002)
table(baseball$Year)
baseball2002 <- subset(baseball, baseball$Year < 2002)
str(baseball2002)
table(baseball$Year)
baseball2002 <- subset(baseball, baseball$Year < 2002)
#str(baseball2002)
#table(baseball$Year)
baseball2002 <- subset(baseball, baseball$Year < 2002)
#str(baseball2002)
View(baseball2002)
library(ggplot2)
ggplot(baseball2002)+ geom_point(aes(W,Team))
ggplot(baseball2002)+ geom_point(na.rm=T,aes(W,Team,color=as.factor(Playoffs))) +
scale_color_manual(name="Playoffs",values=c("black","red"),labels=c("No","Yes")) +  geom_vline(xintercept=95,color="blue",lwd=1) + geom_vline(xintercept=85,color="lightblue",lwd=1)
#library(ggplot2)
#ggplot(baseball2002)+ geom_point(aes(W,Team))
#ggplot(baseball2002)+ geom_point(na.rm=T,aes(W,Team,color=as.factor(Playoffs))) +
#scale_color_manual(name="Playoffs",values=c("black","red"),labels=c("No","Yes")) +  #geom_vline(xintercept=95,color="blue",lwd=1) + geom_vline(xintercept=85,color="lightblue",lwd=1)
baseball_Playoffs <- subset(baseball, baseball$Playoffs ==1)
#library(ggplot2)
#ggplot(baseball2002)+ geom_point(aes(W,Team))
#ggplot(baseball2002)+ geom_point(na.rm=T,aes(W,Team,color=as.factor(Playoffs))) +
#scale_color_manual(name="Playoffs",values=c("black","red"),labels=c("No","Yes")) +  #geom_vline(xintercept=95,color="blue",lwd=1) + geom_vline(xintercept=85,color="lightblue",lwd=1)
baseball_Playoffs <- subset(baseball, baseball$Playoffs ==1)
mean(baseball_Playoffs$W)
library(ggplot2)
ggplot(baseball2002)+ geom_point(aes(W,Team))
ggplot(baseball2002)+ geom_point(na.rm=T,aes(W,Team,color=as.factor(Playoffs))) +
scale_color_manual(name="Playoffs",values=c("black","red"),labels=c("No","Yes")) +  geom_vline(xintercept=95,color="blue",lwd=1) + geom_vline(xintercept=85,color="lightblue",lwd=1)
#library(ggplot2)
#ggplot(baseball2002)+ geom_point(aes(W,Team))
#ggplot(baseball2002)+ geom_point(na.rm=T,aes(W,Team,color=as.factor(Playoffs))) +
#scale_color_manual(name="Playoffs",values=c("black","red"),labels=c("No","Yes")) +  #geom_vline(xintercept=95,color="blue",lwd=1) + geom_vline(xintercept=85,color="lightblue",lwd=1)
baseball_Playoffs <- subset(baseball, baseball$Playoffs ==1)
mean(baseball_Playoffs$W) # avrage number of wins to make it to the playoffs
min(baseball_Playoffs$W)
#library(ggplot2)
#ggplot(baseball2002)+ geom_point(aes(W,Team))
#ggplot(baseball2002)+ geom_point(na.rm=T,aes(W,Team,color=as.factor(Playoffs))) +
#scale_color_manual(name="Playoffs",values=c("black","red"),labels=c("No","Yes")) +  #geom_vline(xintercept=95,color="blue",lwd=1) + geom_vline(xintercept=85,color="lightblue",lwd=1)
baseball_Playoffs <- subset(baseball, baseball$Playoffs ==1)
mean(baseball_Playoffs$W) # avrage number of wins to make it to the playoffs
min(baseball_Playoffs$W)
max(baseball_Playoffs$W)
#library(ggplot2)
#ggplot(baseball2002)+ geom_point(aes(W,Team))
#ggplot(baseball2002)+ geom_point(na.rm=T,aes(W,Team,color=as.factor(Playoffs))) +
#scale_color_manual(name="Playoffs",values=c("black","red"),labels=c("No","Yes")) +  #geom_vline(xintercept=95,color="blue",lwd=1) + geom_vline(xintercept=85,color="lightblue",lwd=1)
baseball_Playoffs <- subset(baseball2002, baseball2002$Playoffs ==1)
mean(baseball_Playoffs$W) # avrage number of wins to make it to the playoffs
min(baseball_Playoffs$W)
max(baseball_Playoffs$W)
baseball2002$RD <- baseball2002$RS - baseball2002$RA
baseball2002$RD <- baseball2002$RS - baseball2002$RA
model1 <- lm(W~RD,data=baseball2002)
summary(model1)
baseball2002$RD <- baseball2002$RS - baseball2002$RA
model1 <- lm(W~RD,data=baseball2002)
#summary(model1)
baseball2002$RD <- baseball2002$RS - baseball2002$RA
model1 <- lm(W~RD,data=baseball2002)
#summary(model1)
model1$coefficients
(95 - 80.92222222)/0.09918986
summary(baseball2002$BA)
summary(baseball2002$SLG)
summary(baseball2002$OBP)
summary(baseball2002$OPS)
